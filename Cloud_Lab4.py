# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16NeCOsoqrGKcBf1gY9dvTINvhI9IKCbB
"""

url = 'https://data.gov.il/api/3/action/datastore_search?resource_id=053cea08-09bc-40ec-8f7a-156f0677aff3'
import requests
import pandas as pd
import ipywidgets as widgets
from IPython.display import display
from plotly.offline import iplot
import plotly.graph_objs as go
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import plotly.express as px

# Create a simple DataFrame
pd.set_option("display.max_columns", None)
response = requests.get(url)
data = response.json()['result']['records']
df = pd.DataFrame(data)

# Tab 1: Data Overview
tab1_content = widgets.Output()
with tab1_content:
    print("Data Overview:")
    display(df.describe())  # Summary statistics

# Tab 2: Raw Data
tab2_content = widgets.Output()
with tab2_content:
    print("Raw Data:")
    display(df)  # Full DataFrame

# Tab 3: Charts
tab3_content = widgets.Output()
with tab3_content:
    print("Charts:")
    plt.clf()  # Clear the current figure
    plt.figure(figsize=(10, 8))  # Increased figure size to accommodate labels
    side_length = 10
    data = 5 + np.random.randn(side_length, side_length)
    data += np.arange(side_length)
    data += np.reshape(np.arange(side_length), (side_length, 1))

    # Create bat chart
    # year = data = response.json()['result']['records']['shnat_yitzur']
    # plt.bar(years, amount)


    ######
    # Group data by year and count occurrences
    year_counts = df['shnat_yitzur'].value_counts().sort_index()

    # Extract years and counts
    years = year_counts.index
    amount = year_counts.values

    # Create bar chart
    plt.figure(figsize=(10, 6))  # Adjust figure size as needed
    plt.bar(years, amount)
    plt.xlabel("Year")
    plt.ylabel("Number of Cars")
    plt.title("Number of Cars per Year")
    plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better readability
    plt.tight_layout()  # Adjust layout to prevent labels from overlapping
    plt.show()

    ####



    # Create heatmap with labels
    # heatmap = sns.heatmap(data,
    #                      cmap='viridis',
    #                      annot=True,
    #                      fmt='.1f',
    #                      cbar_kws={'label': 'Value Intensity'})
    # plt.title('Enhanced Heatmap with Labels')
    # plt.xlabel('X Axis Position')
    # plt.ylabel('Y Axis Position')
    # plt.show()  # Add this to display the plot
    # plt.close()  # Close the figure to free memory


# Create Tabs
tabs = widgets.Tab(children=[tab1_content, tab2_content,tab3_content])
tabs.set_title(0, 'Tab 1: Data Overview')
tabs.set_title(1, 'Tab 2: Raw Data')
tabs.set_title(2, 'Tab 3: Year Count')



# Display Tabs
display(tabs)